#hn-api

hn-api is a simple, ad-hoc Python API for [Hacker News][hn]. I say "ad-hoc" because it is unofficial, unauthorised and works by screen-scraping and slicing-and-dicing HTML. I say "simple" because it's in its infancy.

The guts of hn-api were part of my [hnsh][] project, but I decided to pull the API stuff out and make it its own project so that other people could use the pseudo-API I'd created.

[hn]: http://news.ycombinator.com "Hacker News"
[hnsh]: http://github.com/scottjacksonx/hnsh/ "hacker news shell - browse HN from the command-line"

##Documentation

There are four classes in hn-api:

- `HackerNewsAPI` -- The main class for turning the source code from HN into Python objects.
- `HackerNewsStory` -- The class representing a story on HN.
- `HackerNewsUser` -- The class representing an HN user.
- `HNException` -- An exception raised when things go wrong while trying to get info from HN.

###HackerNewsAPI Class

Methods:

- `getTopStories()` -- Returns the 30 stories on the [front page][hn] of HN as a list of `HackerNewsStory` objects.
- `getNewestStories()` -- Returns 30 stories [most recently submitted][newest] to HN as a list of `HackerNewsStory` objects.
- `getBestStories()` -- Returns the 30 stories on the "[best][best]" page of HN as a list of `HackerNewsStory` objects.

`HackerNewsAPI` objects have other methods, but they're internal and you don't need to deal with them to get stories from HN.

[best]: http://news.ycombinator.com/best
[newest]: http://news.ycombinator.com/newest

###HackerNewsStory Class

Attributes:

- `id` -- The Hacker News ID of a story.
- `number` -- What rank the story is on HN.
- `title` -- The title of the story.
- `domain` -- The website the story is from.
- `URL` -- The full URL of the story.
- `score` -- Current score of the story.
- `submitter` -- The HN username of the person that submitted the story.
- `commentCount` -- How many comments the story has.
- `commentsURL` -- The HN link for discussing the story.

Methods:

- `printDetails()` -- Prints the attributes of the story.


###HackerNewsUser Class

Attributes:

- `karma` -- The user's score on HN.
- `name` -- The user's username.
- `userPageURL` -- The URL of the user's 'user' page.
- `threadsPageURL` -- The URL of the user's 'threads' page.

Methods:

- `__init__(username)` -- Constructs a user with a username.
- `refreshKarma()` -- Updates the user's karma.

###HNException Class

HNException is exactly the same as a plain Python [Exception][exception]. The HNException class exists soley for identifying errors that come from trying to get data from HN.

[exception]: http://docs.python.org/library/exceptions.html#exceptions.Exception


##Use

Here's a really simple example of how to use hn-api:

	from hnapi import *
	
	hn = HackerNewsAPI()
	stories = hn.getTopStories()
	for s in stories:
		s.printDetails()
		
To break this down:

- `from hnapi import *` imports the code you need from hnapi.py.
- `hn = HackerNewsAPI()` instantiates the API.
- `stories = hn.getTopStories()` gets the 30 stories on the front page of HN and stores them in a list of HackerNewsStory objects.
- `for s in stories: s.printDetails()` prints the details of every story on the front page of HN.

##Licensing

hn-api is released under the [Simplified BSD License](http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29).

Copyright (c) 2010 Scott Jackson. All rights reserved.


##The Future

I'd love to flesh hn-api out a little more. If you'd like to contribute to the project, feel free to do so!

###I hope that hn-api is of use to someone writing a Hacker News-related application. If you use hn-api in something you write, [drop me a line][contact] -- I'd love to hear about it!

[contact]: http://scottjackson.org/me

